To remove nodes from a linked list such that each removed node has a strictly greater value anywhere to its right, you can iterate through the linked list while keeping track of the maximum value encountered so far. If a node's value is less than the maximum value encountered, it should be removed from the list. Here's a Python function to achieve this:

```python
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def remove_greater_nodes(head):
    if not head:
        return None
    
    dummy = ListNode(0)
    dummy.next = head
    curr = head
    max_value = float('-inf')
    
    while curr:
        if curr.val < max_value:
            prev.next = curr.next
        else:
            prev = curr
            max_value = curr.val
        curr = curr.next
    
    return dummy.next

# Example usage:
head1 = ListNode(5)
head1.next = ListNode(2)
head1.next.next = ListNode(13)
head1.next.next.next = ListNode(3)
head1.next.next.next.next = ListNode(8)

result_head1 = remove_greater_nodes(head1)
while result_head1:
    print(result_head1.val)
    result_head1 = result_head1.next
# Output: 13->8

head2 = ListNode(1)
head2.next = ListNode(1)
head2.next.next = ListNode(1)
head2.next.next.next = ListNode(1)

result_head2 = remove_greater_nodes(head2)
while result_head2:
    print(result_head2.val)
    result_head2 = result_head2.next
# Output: 1->1->1->1
```

This function iterates through the linked list, keeping track of the maximum value encountered so far. If a node's value is less than the maximum value, it is removed from the list. Finally, it returns the modified linked list.
