def ways_to_cut_pizza(pizza, k):
    MOD = 10**9 + 7
    rows, cols = len(pizza), len(pizza[0])
    prefix_sum = [[0] * (cols + 1) for _ in range(rows + 1)]
    
    for i in range(rows - 1, -1, -1):
        for j in range(cols - 1, -1, -1):
            prefix_sum[i][j] = prefix_sum[i][j + 1] + prefix_sum[i + 1][j] - prefix_sum[i + 1][j + 1] + (pizza[i][j] == 'A')
    
    def has_apple(r1, c1, r2, c2):
        return prefix_sum[r1][c1] - prefix_sum[r1][c2] - prefix_sum[r2][c1] + prefix_sum[r2][c2]
    
    def dp_cut(r, c, cuts):
        if has_apple(r, c, rows, cols) == 0:
            return 0
        if cuts == 0:
            return 1
        
        ways = 0
        for i in range(r + 1, rows):
            if has_apple(r, c, i, cols) > 0:
                ways = (ways + dp_cut(i, c, cuts - 1)) % MOD
        
        for j in range(c + 1, cols):
            if has_apple(r, c, rows, j) > 0:
                ways = (ways + dp_cut(r, j, cuts - 1)) % MOD
        
        return ways
    
    return dp_cut(0, 0, k - 1)

pizza = ["A..","AAA","..."]
k = 3
print(ways_to_cut_pizza(pizza, k))  # Output: 3
